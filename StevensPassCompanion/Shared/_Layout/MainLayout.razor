@inherits LayoutComponentBase

@inject ILogger<MainLayout> _logger
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" 
        Color="Color.Inherit" 
        Edge="Edge.Start" 
        OnClick="@((e) => DrawerToggle())" />


        <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
            <MudText Typo="Typo.h5" Class="ml-3">Stevens Pass Companion</MudText>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
            <MudText Typo="Typo.h5" Class="ml-3">SPC</MudText>
        </MudHidden>


        <MudSpacer />
        <MudToggleIconButton @bind-Toggled="_isDarkMode" @bind-Toggled:after="ThemeToggled"
        Icon="@Icons.Material.Outlined.DarkMode"
        Color="@Color.Default"
        ToggledIcon="@Icons.Material.Outlined.LightMode"
        ToggledColor="@Color.Default" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
        <MudScrollToTop>
            <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" Style="color: white; background: gray" />
        </MudScrollToTop>
    </MudMainContent>
</MudLayout>

@code {

    private bool _isDarkMode;

    private MudTheme _theme = new MudTheme 
    { 
        PaletteLight = new PaletteLight()
        {
                AppbarBackground = Colors.Gray.Lighten3,
                AppbarText = Colors.Gray.Darken4
        },
        PaletteDark = new PaletteDark(){
        }
    };

    public async Task ThemeToggled()
    {
        if (_isDarkMode)
        {
            await localStorage.SetItemAsync("IsDarkModeLocalStorage", true);
        }
        else
        {
            await localStorage.SetItemAsync("IsDarkModeLocalStorage", false);
        }
    }

    bool _drawerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        bool isDarkModeLocalStorage = await localStorage.GetItemAsync<bool>("IsDarkModeLocalStorage");

        if (isDarkModeLocalStorage)
        {
            _isDarkMode = true;
        }
    }


}
