@using System.Diagnostics

@implements IDisposable

@inject WSDOTService _WSDOTService

@if (wsdotReport == null)
{
    <MudItem xs="12">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="25px" />
    </MudItem>
    <MudItem xs="12">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="25px" />
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="MudBlazor.Animation.Wave" Height="50px" />
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="MudBlazor.Animation.Wave" Height="50px" />
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100px" Height="25px" />
    </MudItem>
}
else if (wsdotReport != null && wsdotReport.IsSuccessStatusCode)
{
    string mountainPassName = wsdotReport?.MountainPassName ?? string.Empty;
    DateTime? dateUpdated = wsdotReport?.DateUpdated ?? null;

        <MudItem xs="12" sm="6" md="6">
            @if (!string.IsNullOrWhiteSpace(mountainPassName))
            {
                <MudText Typo="Typo.h5">@mountainPassName</MudText>
            }
            @if (dateUpdated != null)
            {
                <MudText Typo="Typo.body1" Align="Align.Left">Updated: @dateUpdated</MudText>
            }
        </MudItem>
        if (wsdotReport.RestrictionOne.RestrictionText.Contains("closed", StringComparison.InvariantCultureIgnoreCase))
        {
        <MudItem xs="12" sm="6" md="6">
            <MudAlert Typo="Typo.body1" Severity="Severity.Error" Elevation="@elevation">
                <MudText Typo="Typo.body1">
                    <b>@wsdotReport?.RestrictionOne?.TravelDirection</b> @wsdotReport?.RestrictionOne?.RestrictionText
                </MudText>
            </MudAlert>
        </MudItem>
        }
        else
        {
        <MudItem xs="12" sm="6" md="6">
            <MudAlert Typo="Typo.body1" Severity="Severity.Success" Elevation="@elevation">
                <MudText Typo="Typo.body1">
                    <b>@wsdotReport?.RestrictionOne?.TravelDirection</b> @wsdotReport?.RestrictionOne?.RestrictionText
                </MudText>
            </MudAlert>
        </MudItem>
        }
        if (wsdotReport.RestrictionTwo.RestrictionText.Contains("closed", StringComparison.InvariantCultureIgnoreCase))
        {
        <MudItem xs="12" sm="6" md="6">
            <MudAlert Typo="Typo.body1" Severity="Severity.Error" Elevation="@elevation">
                <MudText Typo="Typo.body1">
                    <b>@wsdotReport?.RestrictionTwo?.TravelDirection</b> @wsdotReport?.RestrictionTwo?.RestrictionText
                </MudText>
            </MudAlert>
        </MudItem>
        }
        else
        {
        <MudItem xs="12" sm="6" md="6">
            <MudAlert Typo="Typo.body1" Severity="Severity.Success" Elevation="@elevation">
                <MudText Typo="Typo.body1">
                    <b>@wsdotReport?.RestrictionTwo?.TravelDirection</b> @wsdotReport?.RestrictionTwo?.RestrictionText
                </MudText>
            </MudAlert>
        </MudItem>
        }
        <MudItem xs="12" sm="6" md="6">
            <MudFab Label="See Full Report" Size="Size.Small" Href="@pageUrl" />
        </MudItem>



}
else
{
    <MudItem xs="12" sm="12" md="4">
        <MudCard style="height:100%">
            <MudCardContent>
                <MudAlert Severity="Severity.Warning" Elevation="@elevation">
                    <MudText Typo="Typo.body1">
                        @wsdotApiAlertText
                    </MudText>
                </MudAlert>
                <MudFab Label="See Full Report" Size="Size.Small" Href="@pageUrl" />
            </MudCardContent>
        </MudCard>
    </MudItem>

@*         <MudItem xs="12" sm="6" md="6">
            <MudFab Label="See Full Report" Size="Size.Small" Href="@pageUrl" />
        </MudItem> *@

}

@code {

    [Parameter]
    public string Value { get; set; }

    private string wsdotApiAlertText = "Looks like there was an issue with the WSDOT API. " + 
        "Please try checking the full report using the link below.";

    Timer timer;
    private int elevation = 1;
    private WSDOTReport wsdotReport;

    private string apiUrl = string.Empty;
    private string pageUrl = string.Empty;

    protected override void OnInitialized()
    {
        try
        {
            if (Value.Equals("StevensPass", StringComparison.InvariantCultureIgnoreCase))
            {
                apiUrl = "https://wsdot.wa.gov/Traffic/api/MountainPassConditions/MountainPassConditionsREST.svc/GetMountainPassConditionAsJon?AccessCode=0359523e-015e-4244-9e73-cd932eb44542&PassConditionID=10";
                pageUrl = "/wsdot-stevens-pass";
            }
            else if (Value.Equals("BlewettPass", StringComparison.InvariantCultureIgnoreCase))
            {
                apiUrl = "https://wsdot.wa.gov/Traffic/api/MountainPassConditions/MountainPassConditionsREST.svc/GetMountainPassConditionAsJon?AccessCode=0359523e-015e-4244-9e73-cd932eb44542&PassConditionID=1";
                pageUrl = "/wsdot-blewett-pass";
            }
            else if (Value.Equals("SnoqualmiePass", StringComparison.InvariantCultureIgnoreCase))
            {
                apiUrl = "https://wsdot.wa.gov/Traffic/api/MountainPassConditions/MountainPassConditionsREST.svc/GetMountainPassConditionAsJon?AccessCode=0359523e-015e-4244-9e73-cd932eb44542&PassConditionID=11";
                pageUrl = "/wsdot-snoqualmie-pass";
            }

            timer = new System.Threading.Timer(async _ =>  // async void
            {
                wsdotReport = await _WSDOTService.GetReportAsync(apiUrl);
                // we need StateHasChanged() because this is an async void handler
                // we need to Invoke it because we could be on the wrong Thread
                await InvokeAsync(StateHasChanged);
            }, null, 0, 600000);
        }
        catch (Exception ex)
        {
            Debug.WriteLine("WSDOTReportDashboard - Error - " + ex.Message + ex.StackTrace);
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

}
