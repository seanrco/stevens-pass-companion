@using System.Diagnostics
@implements IDisposable

@inject NOAAService _NOAAService

@if(noaaStevensPassForecast == null)
{
    <MudItem xs="12">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="25px" />
    </MudItem>
    <MudItem xs="12">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="25px" />
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="MudBlazor.Animation.Wave" Height="40px" Width="40px" />
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="40%" />
                    <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="60%" />
                </CardHeaderContent>
            </MudCardHeader>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="MudBlazor.Animation.Wave" Height="150px" />
        </MudCard>
    </MudItem>
}
else if (noaaStevensPassForecast != null && noaaStevensPassForecast.IsSuccessStatusCode)
{
    <MudItem xs="12">
        <MudText Typo="Typo.h5">Stevens Pass Forecast</MudText>
        <MudText Typo="Typo.body1" Align="Align.Left">Updated: @noaaStevensPassForecast.properties.updated</MudText>
    </MudItem>

    Period[] periods = noaaStevensPassForecast?.properties?.periods ?? null;

    if (periods != null && periods.Length > 0)
    {
        Period current = periods.First();

        if (current != null)
        {
            string name = current.name ?? string.Empty;
            int temperature = current.temperature;
            string windDirection = current?.windDirection ?? string.Empty;
            string windSpeed = current?.windSpeed ?? string.Empty;
            string icon = current.icon ?? string.Empty;
            string shortForecast = current.shortForecast ?? string.Empty;
            string detailedForecast = current.detailedForecast ?? string.Empty;

            <MudItem xs="12">
                <MudItem xs="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Secondary" Size="Size.Large">
                                    <MudAvatar Image="@icon" Size="Size.Large" />
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.subtitle1"><b>@name</b></MudText>
                                <MudText Typo="Typo.subtitle2">@shortForecast</MudText>
                                <MudText Typo="Typo.subtitle2">@temperature F / @windSpeed @windDirection</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body1">@detailedForecast</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudItem>
        }
    }
    <MudItem xs="12">
        <MudFab Label="See Full Forecast" Size="Size.Small" Href="/noaa" />
    </MudItem>
}
else
{
    <MudItem xs="12">
        <MudAlert Severity="Severity.Warning" Elevation="@elevation">
            <MudText Typo="Typo.body1">@noaaApiAlertText</MudText>
        </MudAlert>
    </MudItem>
    <MudItem xs="12">
        <MudFab Label="See Full Forecast" Size="Size.Small" Href="/noaa" />
    </MudItem>
}

@code {

    private static string noaaApiAlertText = "Looks like there is an issue with the NOAA API. " + 
        "Please try checking the full forecast using the link below.";

    Timer timer;
    private int elevation = 1;
    private NOAAStevensPassForecast noaaStevensPassForecast;

    protected override void OnInitialized()
    {
        try
        {
            timer = new System.Threading.Timer(async _ =>  // async void
            {
                noaaStevensPassForecast = null;
                noaaStevensPassForecast = await _NOAAService.GetForecastAsync();
                // we need StateHasChanged() because this is an async void handler
                // we need to Invoke it because we could be on the wrong Thread
                await InvokeAsync(StateHasChanged);
            }, null, 0, 600000);
        }
        catch (Exception ex)
        {
            Debug.WriteLine("NOAAReportDashboard - Error - " + ex.Message + ex.StackTrace);
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    noaaStevensPassForecast = await _NOAAService.GetForecastAsync();
    //}

}
