@using System.Diagnostics
@implements IDisposable

@inject WSDOTService _WSDOTService

<MudItem xs="12">
    <MudText Typo="Typo.h6">Cameras</MudText>
</MudItem>

@if (wsdotCameras == null)
{
    <MudItem xs="12">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
    </MudItem>
}
else if (wsdotCameras != null && wsdotCameras.Count() > 0)
{
    foreach (WSDOTCamera camera in wsdotCameras)
    {
        if (camera != null)
        {
            string imgUrl = camera?.ImageURL;

            if (!string.IsNullOrWhiteSpace(imgUrl))
            {
                <MudItem xs="12">
                    <MudImage Src="@imgUrl" Fluid="true" Alt="SP Cam" Elevation="1"  />
                </MudItem>
            }
        }
    }
}
else
{
    <MudItem xs="12">
        <MudAlert Severity="Severity.Warning" Elevation="@elevation">
            <MudText Typo="Typo.body1">
                @wsdotApiAlertText
            </MudText>
        </MudAlert>
    </MudItem>
}

@code {

    [Parameter]
    public string Value { get; set; }

    private int elevation = 1;
    private string wsdotApiAlertText = "Looks like there was an issue with the WSDOT API. " + 
        "Please try reloading the page ." +
        "If still not working please reference the WSDOT site for the current cameras report using link above.";

    Timer timer;
    private List<WSDOTCamera> wsdotCameras;
    private string wsdotCamerasApiUrl = string.Empty;

    protected override void OnInitialized()
    {
        try
        {
            if (Value.Equals("StevensPass", StringComparison.InvariantCultureIgnoreCase))
            {
                wsdotCamerasApiUrl = "https://wsdot.wa.gov/Traffic/api/HighwayCameras/HighwayCamerasREST.svc/SearchCamerasAsJson?AccessCode=0359523e-015e-4244-9e73-cd932eb44542&StateRoute=US%202&&StartingMilepost=61&EndingMilepost=85";
            }
            else if (Value.Equals("BlewettPass", StringComparison.InvariantCultureIgnoreCase))
            {
                wsdotCamerasApiUrl = "https://wsdot.wa.gov/Traffic/api/HighwayCameras/HighwayCamerasREST.svc/SearchCamerasAsJson?AccessCode=0359523e-015e-4244-9e73-cd932eb44542&StateRoute=US%2097&&StartingMilepost=164&EndingMilepost=164";
            }
            else if (Value.Equals("SnoqualmiePass", StringComparison.InvariantCultureIgnoreCase))
            {
                wsdotCamerasApiUrl = "https://wsdot.wa.gov/Traffic/api/HighwayCameras/HighwayCamerasREST.svc/SearchCamerasAsJson?AccessCode=0359523e-015e-4244-9e73-cd932eb44542&StateRoute=I-90&&StartingMilepost=45&EndingMilepost=97";
            }

            timer = new System.Threading.Timer(async _ =>  // async void
            {
                wsdotCameras = null;
                wsdotCameras = await _WSDOTService.GetCamerasAsync(wsdotCamerasApiUrl);
                // we need StateHasChanged() because this is an async void handler
                // we need to Invoke it because we could be on the wrong Thread
                await InvokeAsync(StateHasChanged);
            }, null, 0, 600000);

        }
        catch (Exception ex)
        {
            Debug.WriteLine("WSDOTCameras - Error - " + ex.Message + ex.StackTrace);
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    wsdotReport = await _WSDOTService.GetStevensPassReportAsync();
    //    wsdotCameras = await _WSDOTService.GetCamerasAsync(wsdotUS2CamerasSearchApiUrl);
    //}
}