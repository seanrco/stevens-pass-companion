@inject ILogger<WSDOTCamerasComp> _logger
@inject WSDOTService _WSDOTService


<MudContainer Class="mb-8">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h6">Cameras</MudText>
        </MudItem>
    </MudGrid>
</MudContainer>

@if (wsdotCameras == null)
{
    <MudContainer Class="mb-8">
        <MudGrid>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
            </MudItem>
        </MudGrid>
    </MudContainer>

}
else if (wsdotCameras != null && wsdotCameras.Count() > 0)
{
    <MudContainer Class="mb-8">
        <MudGrid>
            @foreach (WSDOTCamera camera in wsdotCameras)
            {
                if (camera != null)
                {
                    string imgUrl = camera?.ImageURL;

                    if (!string.IsNullOrWhiteSpace(imgUrl))
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard>
                                <MudCardMedia Image="@imgUrl" />
@*                                 <MudCardContent>
                                    <MudImage Src="@imgUrl"  Alt="SP Cam" Elevation="1" Class="rounded-lg" />
                                </MudCardContent> *@
                            </MudCard>
                        </MudItem>
                    }
                }
            }
        </MudGrid>
    </MudContainer>

}
else
{
    <MudContainer Class="mb-8">
        <MudGrid>
            <MudItem xs="12">
                <MudAlert Severity="Severity.Warning" Elevation="@elevation">
                    <MudText Typo="Typo.body1">
                        @wsdotApiAlertText
                    </MudText>
                </MudAlert>
            </MudItem>
        </MudGrid>
    </MudContainer>

}

@code {

    [Parameter]
    public string? Value { get; set; }

    private int elevation = 1;

    private string wsdotApiAlertText = "Looks like there was an issue with the WSDOT API. " + 
        "Please try reloading the page ." +
        "If still not working please reference the WSDOT site for the current cameras report using link above.";

    private List<WSDOTCamera>? wsdotCameras;

    private string wsdotCamerasApiUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            wsdotCameras = await _WSDOTService.GetCamerasAsync(Value);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message + ex.StackTrace);
            _logger.LogError(ex.Message + ex.StackTrace);
        }
    }

}