@page "/noaa"

@inject ILogger<NOAA> _logger
@inject NOAAService _NOAAService

<PageTitle>Stevens Pass Companion - NOAA</PageTitle>

<MudContainer Class="mt-8 mb-4">
    <MudBreadcrumbs Items="breadcrumbs"></MudBreadcrumbs>
</MudContainer>

<MudContainer Class="mb-8">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">@header</MudText>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudContainer Class="mb-8">
    <MudGrid>
        <MudItem xs="12">
            <MudFab StartIcon="@Icons.Material.Filled.Outbound"
            Label="@noaaReportButtonText"
            Size="Size.Small"
            Href="@noaaReportUrl"
            Target="_blank" />
        </MudItem>
    </MudGrid>
</MudContainer>

@if (noaaStevensPassForecast == null)
{
    <MudContainer Class="mb-8">
        <MudGrid>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="25px" />
            </MudItem>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="25px" />
            </MudItem>

            @for (int i = 0; i < 14; i++)
            {
                <MudItem xs="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudSkeleton SkeletonType="SkeletonType.Circle"
                                             Animation="MudBlazor.Animation.Wave"
                                             Height="40px" Width="40px" />
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="40%" />
                                <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="60%" />
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="MudBlazor.Animation.Wave" Height="150px" />
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudContainer>

}
else if (noaaStevensPassForecast != null)
{
    string elevation = UnitDistanceUtilities.ConvertMetersToFeet(noaaStevensPassForecast?.Properties?.Elevation?.Value) ?? string.Empty;
    DateTime? updated = noaaStevensPassForecast?.Properties?.UpdateTime ?? null;
    Period[] periods = noaaStevensPassForecast?.Properties?.Periods ?? null;

    <MudContainer Class="mb-8">
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.body1" Align="Align.Left">Elevation: ~ @elevation ft</MudText>
                <MudText Typo="Typo.body1" Align="Align.Left">Updated: @updated.FormatDateTime()</MudText>
            </MudItem>
        </MudGrid>
    </MudContainer>

    if (periods != null && periods.Length > 0)
    {
        var filters = periods.GroupBy(p => p.ShortForecast)
                         .Select(p => new
                         {
                             ShortName = p.Key,
                             Count = p.Count()
                         })
                         .OrderBy(n => n.ShortName);

        Period[] filteredPeriods;

        filteredPeriods = selectedFilters != null && selectedFilters.Count() > 0
            ? filteredPeriods = periods.Where(p => selectedFilters.Any(s => s.Equals(p.ShortForecast))).ToArray()
            : filteredPeriods = periods.ToArray();

        <MudContainer Class="mb-8">
            <MudGrid>
                <MudItem xs="12" sm="6" md="6">
                    <MudCard Elevation="0">
                        <MudCardContent>
                            <MudSelect T="string" Label="Filter by:" MultiSelection="true" @bind-SelectedValues="selectedFilters" Clearable>
                                @foreach (var s in filters)
                                {
                                    <MudSelectItem T="string" Value="s.ShortName">@s.ShortName (@s.Count)</MudSelectItem>
                                }
                            </MudSelect>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudContainer>

        <MudContainer Class="mb-8">
            <MudGrid>
                @foreach (Period period in filteredPeriods)
                {
                    if (period != null)
                    {
                        string name = period?.Name ?? string.Empty;
                        DateTime? startTime = period?.StartTime ?? default;
                        DateTime? endTime = period?.EndTime ?? default;
                        int? temperature = period?.Temperature;
                        string windDirection = period?.WindDirection ?? string.Empty;
                        string windSpeed = period?.WindSpeed ?? string.Empty;
                        string icon = period?.Icon ?? string.Empty;
                        string shortForecast = period?.ShortForecast ?? string.Empty;
                        string detailedForecast = period?.DetailedForecast ?? string.Empty;

                        <MudItem xs="12">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderAvatar>
                                        <MudAvatar Color="Color.Secondary" Size="Size.Large">
                                            <MudImage Src="@icon" Alt="@shortForecast"></MudImage>
                                        </MudAvatar>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6"><b>@name</b></MudText>
                                        <MudText Typo="Typo.subtitle1">@shortForecast</MudText>
                                        <MudText Typo="Typo.subtitle2">@temperature F / @windSpeed @windDirection</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.body1">@detailedForecast</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudText Typo="Typo.caption">@startTime.FormatDateTime() to @endTime.FormatDateTime()</MudText>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudContainer>
    }

}
else
{
    <MudContainer Class="mb-8">
        <MudGrid>
            <MudItem xs="12">
                <MudAlert Severity="Severity.Warning" Elevation="@elevation">
                    <MudText Typo="Typo.body1">@noaaApiAlertText</MudText>
                </MudAlert>
            </MudItem>
        </MudGrid>
    </MudContainer>
}




@code {

    private int elevation = 1;

    private readonly string header = "NOAA Stevens Pass Forecast";

    private readonly string noaaApiAlertText = "Looks like there is an issue with the NOAA API. " +
        "Please try reloading the page ." + 
        "If still not working please reference the NOAA site for the current forecast using link above.";

    private readonly string noaaReportUrl = "https://forecast.weather.gov/MapClick.php?lat=47.7462&lon=-121.0859#.Y6a2wNXMK38s";

    private readonly string noaaReportButtonText = "noaa.com";

    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("NOAA Forecast", href: null, disabled: true),
    };

    private NOAAStevensPassForecast? noaaStevensPassForecast;

    private IEnumerable<string> selectedFilters { get; set; } = new HashSet<string>() { };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            noaaStevensPassForecast = await _NOAAService.GetForecastAsync();
        }
        catch(Exception ex)
        {
            Console.Error.WriteLine(ex.Message + ex.StackTrace);
            _logger.LogError(ex.Message + ex.StackTrace);
        }
    }

}