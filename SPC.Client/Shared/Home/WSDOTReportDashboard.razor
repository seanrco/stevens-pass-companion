@inject ILogger<WSDOTReportDashboard> _logger
@inject WSDOTService _WSDOTService

@if (wsdotReport == null)
{
    <MudItem xs="12" sm="12" md="4">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="200px" Height="25px" />
                    <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="200px" Height="25px" />
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudSkeleton Animation="MudBlazor.Animation.Wave" Height="100px" />
                <MudSkeleton Animation="MudBlazor.Animation.Wave" Height="100px" />
                <MudSkeleton Width="100px" Height="25px" />
            </MudCardContent>
        </MudCard>
    </MudItem>
}
else if (wsdotReport != null)
{
    string mountainPassName = wsdotReport?.MountainPassName ?? string.Empty;
    string dateUpdated = wsdotReport?.DateUpdated ?? string.Empty;

    <MudItem xs="12" sm="12" md="4">
        <MudCard style="height:100%">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Secondary" Size="Size.Large">
                        <MudImage Src="images/wsdot-logo.png" Alt="WSDOT"></MudImage>
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    @if (!string.IsNullOrWhiteSpace(mountainPassName))
                    {
                        <MudText Typo="Typo.h5">@mountainPassName</MudText>
                    }
                    @if (dateUpdated != null)
                    {
                        <MudText Typo="Typo.body1" Align="Align.Left">Updated: @dateUpdated.ConvertWsdotJsonDateTime()</MudText>
                    }
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (wsdotReport.RestrictionOne.RestrictionText.Contains("closed", StringComparison.InvariantCultureIgnoreCase))
                {
                    <MudAlert Typo="Typo.body1" Severity="Severity.Error" Elevation="@elevation" Class="mt-6" >
                        <MudText Typo="Typo.body1">
                            <b>@wsdotReport?.RestrictionOne?.TravelDirection</b> @wsdotReport?.RestrictionOne?.RestrictionText
                        </MudText>
                    </MudAlert>
                }
                else
                {
                    <MudAlert Typo="Typo.body1" Severity="Severity.Success" Elevation="@elevation" Class="mt-6">
                        <MudText Typo="Typo.body1">
                            <b>@wsdotReport?.RestrictionOne?.TravelDirection</b> @wsdotReport?.RestrictionOne?.RestrictionText
                        </MudText>
                    </MudAlert>
                }
                @if (wsdotReport.RestrictionTwo.RestrictionText.Contains("closed", StringComparison.InvariantCultureIgnoreCase))
                {
                    <MudAlert Typo="Typo.body1" Severity="Severity.Error" Elevation="@elevation" Class="mt-6">
                        <MudText Typo="Typo.body1">
                            <b>@wsdotReport?.RestrictionTwo?.TravelDirection</b> @wsdotReport?.RestrictionTwo?.RestrictionText
                        </MudText>
                    </MudAlert>
                }
                else
                {
                    <MudAlert Typo="Typo.body1" Severity="Severity.Success" Elevation="@elevation" Class="mt-6">
                        <MudText Typo="Typo.body1">
                            <b>@wsdotReport?.RestrictionTwo?.TravelDirection</b> @wsdotReport?.RestrictionTwo?.RestrictionText
                        </MudText>
                    </MudAlert>
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Size="Size.Large" Href="@pageUrl">See Full Report</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
}
else
{
    <MudItem xs="12" sm="12" md="4">
        <MudCard style="height:100%">
            <MudCardContent>
                <MudAlert Severity="Severity.Warning" Elevation="@elevation">
                    <MudText Typo="Typo.body1">
                        @wsdotApiAlertText
                    </MudText>
                </MudAlert>
                <MudFab Label="See Full Report" Size="Size.Small" Href="@pageUrl" />
            </MudCardContent>
        </MudCard>
    </MudItem>
}

@code {

    [Parameter]
    public string Value { get; set; }

    private string wsdotApiAlertText = "Looks like there was an issue with the WSDOT API. " + 
        "Please try checking the full report using the link below.";

    private int elevation = 1;
    private WSDOTReport? wsdotReport;

    private string id = string.Empty;
    private string pageUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Value.Equals("StevensPass", StringComparison.InvariantCultureIgnoreCase))
            {
                pageUrl = "/wsdot-stevens-pass";
            }
            else if (Value.Equals("BlewettPass", StringComparison.InvariantCultureIgnoreCase))
            {
                pageUrl = "/wsdot-blewett-pass";
            }
            else if (Value.Equals("SnoqualmiePass", StringComparison.InvariantCultureIgnoreCase))
            {
                pageUrl = "/wsdot-snoqualmie-pass";
            }

            wsdotReport = await _WSDOTService.GetReportAsync(Value);

        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message + ex.StackTrace);
            _logger.LogError(ex.Message + ex.StackTrace);
        }
    }

}
