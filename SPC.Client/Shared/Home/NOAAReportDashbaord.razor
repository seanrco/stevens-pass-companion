@inject ILogger<NOAAReportDashbaord> _logger
@inject NOAAService _NOAAService
@inject Blazored.LocalStorage.ILocalStorageService _localStorageService

@if(noaaStevensPassForecast == null)
{
    <MudItem xs="12">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="25px" Width="40%" />
    </MudItem>
    <MudItem xs="12">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="25px" Width="40%" />
    </MudItem>
    <MudItem xs="12" sm="6" md="6">
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="MudBlazor.Animation.Wave" Height="40px" Width="40px" />
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="40%" />
                    <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="60%" />
                    <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="40%" />
                </CardHeaderContent>
            </MudCardHeader>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="MudBlazor.Animation.Wave" Height="150px" />
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="6">
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="MudBlazor.Animation.Wave" Height="40px" Width="40px" />
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="40%" />
                    <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="60%" />
                    <MudSkeleton Animation="MudBlazor.Animation.Wave" Width="40%" />
                </CardHeaderContent>
            </MudCardHeader>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="MudBlazor.Animation.Wave" Height="150px" />
        </MudCard>
    </MudItem>
}
else if (noaaStevensPassForecast != null)
{
    string dateUpdated = noaaStevensPassForecast.Properties.UpdateTime.FormatDateTime() ?? string.Empty;

    <MudItem xs="12">
        <MudText Typo="Typo.h5">Stevens Pass Forecast</MudText>
        <MudText Typo="Typo.body1" Align="Align.Left">Updated: @dateUpdated</MudText>
    </MudItem>

    Period[] periods = noaaStevensPassForecast?.Properties?.Periods ?? null;

    if (periods != null && periods.Length > 0)
    {
        Period[] current = periods.Take(2).ToArray();

        if (current != null && current.Length > 0)
        {
            foreach(Period c in current)
            {
                string name = c?.Name ?? string.Empty;
                DateTime? startTime = c?.StartTime ?? default;
                DateTime? endTime = c?.EndTime ?? default;
                int temperature = c?.Temperature ?? default;
                string windDirection = c?.WindDirection ?? string.Empty;
                string windSpeed = c?.WindSpeed ?? string.Empty;
                string icon = c?.Icon ?? string.Empty;
                string shortForecast = c?.ShortForecast ?? string.Empty;
                string detailedForecast = c?.DetailedForecast ?? string.Empty;

                <MudItem xs="12" sm="6" md="6">
                    <MudCard style="height:100%">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Secondary" Size="Size.Large">
                                    <MudImage Src="@icon" Alt="@shortForecast"></MudImage>
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6"><b>@name</b></MudText>
                                <MudText Typo="Typo.subtitle1">@shortForecast</MudText>
                                <MudText Typo="Typo.subtitle2">@temperature F / @windSpeed @windDirection</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudToggleIconButton Icon="@Icons.Material.Filled.StarBorder" Title="Save"
                                                     ToggledIcon="@Icons.Material.Filled.Star" ToggledTitle="Saved"
                                                     ToggledChanged="@(args => ToggleSavePeriod(args, c))"
                                                     Toggled="@c.NoaaCheckSavedPeriod(_noaaSavedPeriods)" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body1">@detailedForecast</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudText Typo="Typo.caption">@startTime.FormatDateTime() to @endTime.FormatDateTime()</MudText>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    }
    <MudItem xs="12">
        <MudFab Label="See Full Forecast" Size="Size.Small" Href="/noaa" />
    </MudItem>
}
else
{
    <MudItem xs="12">
        <MudAlert Severity="Severity.Warning" Elevation="@elevation">
            <MudText Typo="Typo.body1">@noaaApiAlertText</MudText>
        </MudAlert>
    </MudItem>
    <MudItem xs="12">
        <MudFab Label="See Full Forecast" Size="Size.Small" Href="/noaa" />
    </MudItem>
}


@code {

    private static string noaaApiAlertText = "Looks like there is an issue with the NOAA API. " + 
        "Please try checking the full forecast using the link below.";

    private int elevation = 1;

    private NOAAStevensPassForecast? noaaStevensPassForecast;

    private string _noaaSavedPeriods { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _noaaSavedPeriods = await _localStorageService.GetItemAsync<string>("NOAA_SAVED_PERIODS") ?? string.Empty;
            noaaStevensPassForecast = await _NOAAService.GetForecastAsync();
        }
        catch (Exception ex)
        {
            Debug.WriteLine("NOAAReportDashboard - Error - " + ex.Message + ex.StackTrace);
        }
    }

    public async Task ToggleSavePeriod(bool toggled, Period period)
    {
        if (toggled)
        {
            await _localStorageService.SetItemAsync(
                "NOAA_SAVED_PERIODS",
                period.NoaaAddSavedPeriod(_noaaSavedPeriods)
            );
        }
        else
        {
            await _localStorageService.SetItemAsync(
                "NOAA_SAVED_PERIODS",
                period.NoaaRemoveSavedPeriod(_noaaSavedPeriods)
            );
        }

        _noaaSavedPeriods = await _localStorageService.GetItemAsync<string>("NOAA_SAVED_PERIODS") ?? string.Empty;
    }

}
