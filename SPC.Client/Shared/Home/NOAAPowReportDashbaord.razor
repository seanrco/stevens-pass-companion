@inject ILogger<NOAAPowReportDashbaord> _logger
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@inject NOAAService _NOAAService

@if (noaaStevensPassForecast != null)
{
    Period[] periods = noaaStevensPassForecast?.Properties?.Periods ?? null;

    if (periods != null && periods.Length > 0)
    {
        Period[] powDays = periods
            .Where(p => p.ShortForecast.Equals("Heavy Snow", StringComparison.CurrentCultureIgnoreCase))
            .Take(1)
            .ToArray();

        if (powDays != null && powDays.Length > 0)
        {
            foreach (Period powDay in powDays)
            {
                string name = powDay?.Name ?? string.Empty;
                DateTime? startTime = powDay?.StartTime ?? default;
                DateTime? endTime = powDay?.EndTime ?? default;
                int temperature = powDay?.Temperature ?? default;
                string windDirection = powDay?.WindDirection ?? string.Empty;
                string windSpeed = powDay?.WindSpeed ?? string.Empty;
                string icon = powDay?.Icon ?? string.Empty;
                string shortForecast = powDay?.ShortForecast ?? string.Empty;
                string detailedForecast = powDay?.DetailedForecast ?? string.Empty;

                <MudDrawer @bind-Open="@_open" Anchor="Anchor.Bottom" Elevation="1" Variant="@DrawerVariant.Temporary" OverlayAutoClose="false">
                    <MudDrawerHeader>
                        <MudText Typo="Typo.h4">POW Alert!</MudText>
                        <MudButton Variant="Variant.Text" OnClick="@(() => CloseDrawer())">Close</MudButton>
                        <MudButton Variant="Variant.Text" OnClick="@(() => HideDrawer(startTime))">Close</MudButton>
                    </MudDrawerHeader>
                    <MudCard style="height:100%">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Secondary" Size="Size.Large">
                                    <MudImage Src="@icon" Alt="@shortForecast"></MudImage>
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6"><b>@name</b></MudText>
                                <MudText Typo="Typo.subtitle1">@shortForecast</MudText>
                                <MudText Typo="Typo.subtitle2">@temperature F / @windSpeed @windDirection</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body1">@detailedForecast</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudText Typo="Typo.caption">@startTime.FormatDateTime() to @endTime.FormatDateTime()</MudText>
                        </MudCardActions>
                    </MudCard>
                </MudDrawer>
            }
        }
    }
}

@code {

    private int elevation = 1;

    private NOAAStevensPassForecast? noaaStevensPassForecast;

    private DateTime? _hideDrawer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            noaaStevensPassForecast = await _NOAAService.GetForecastAsync();
        }
        catch (Exception ex)
        {
            Debug.WriteLine("NOAAReportDashboard - Error - " + ex.Message + ex.StackTrace);
        }
    }

    private bool _open = true;

    private void CloseDrawer()
    {
        _open = false;
    }

    public async Task HideDrawer(DateTime? startTime)
    {
        _open = false;
        await localStorage.SetItemAsync("HideDrawer", startTime);
    }

}
