@inject ILogger<WSDOTReportPartial> _logger
@inject WSDOTService _WSDOTService

@if (wsdotReport == null)
{
    <MudContainer Class="mb-8">
        <MudGrid>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="25px" />
            </MudItem>
            <MudItem xs="12">
                <MudCard>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="MudBlazor.Animation.Wave" Height="50px" />
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <MudCard>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="MudBlazor.Animation.Wave" Height="50px" />
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="25px" />
            </MudItem>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="25px" />
            </MudItem>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="25px" />
            </MudItem>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="25px" />
            </MudItem>
        </MudGrid>
    </MudContainer>
}
else if (wsdotReport != null && wsdotReport.IsSuccessStatusCode)
{
    <MudContainer Class="mb-8">
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle1">Updated: @wsdotReport.DateUpdated.ConvertWsdotJsonDateTime()</MudText>
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.h6">Status</MudText>
            </MudItem>

            @if (wsdotReport.RestrictionOne.RestrictionText.Contains("closed", StringComparison.InvariantCultureIgnoreCase))
            {
                <MudItem xs="12" sm="6" md="6">
                    <MudAlert Severity="Severity.Error" Elevation="@elevation" style="height:100%">
                        <MudText Typo="Typo.body1">
                            <b>@wsdotReport.RestrictionOne.TravelDirection</b> @wsdotReport.RestrictionOne.RestrictionText
                        </MudText>
                    </MudAlert>
                </MudItem>
            }
            else
            {
                <MudItem xs="12" sm="6" md="6">
                    <MudAlert Severity="Severity.Success" Elevation="@elevation" style="height:100%">
                        <MudText Typo="Typo.body1">
                            <b>@wsdotReport.RestrictionOne.TravelDirection</b> @wsdotReport.RestrictionOne.RestrictionText
                        </MudText>
                    </MudAlert>
                </MudItem>
            }

            @if (wsdotReport.RestrictionTwo.RestrictionText.Contains("closed", StringComparison.InvariantCultureIgnoreCase))
            {
                <MudItem xs="12" sm="6" md="6">
                    <MudAlert Severity="Severity.Error" Elevation="@elevation" style="height:100%">
                        <MudText Typo="Typo.body1">
                            <b>@wsdotReport.RestrictionTwo.TravelDirection</b> @wsdotReport.RestrictionTwo.RestrictionText
                        </MudText>
                    </MudAlert>
                </MudItem>
            }
            else
            {
                <MudItem xs="12" sm="6" md="6">
                    <MudAlert Severity="Severity.Success" Elevation="@elevation" style="height:100%">
                        <MudText Typo="Typo.body1">
                            <b>@wsdotReport.RestrictionTwo.TravelDirection</b> @wsdotReport.RestrictionTwo.RestrictionText
                        </MudText>
                    </MudAlert>
                </MudItem>
            }

            <MudItem xs="6" sm="6" md="3">
                <MudText Typo="Typo.h6">Conditions</MudText>
                @if (!string.IsNullOrWhiteSpace(wsdotReport.RoadCondition))
                {
                    <MudText Typo="Typo.body1">@wsdotReport.RoadCondition</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body1">n/a</MudText>
                }
            </MudItem>

            <MudItem xs="6" sm="6" md="3">
                <MudText Typo="Typo.h6">Weather</MudText>
                @if (!string.IsNullOrWhiteSpace(wsdotReport.WeatherCondition))
                {
                    <MudText Typo="Typo.body1">@wsdotReport.WeatherCondition</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body1">n/a</MudText>
                }
            </MudItem>

            <MudItem xs="6" sm="6" md="3">
                <MudText Typo="Typo.h6">Temperature</MudText>
                @if (wsdotReport.TemperatureInFahrenheit != null && wsdotReport.TemperatureInFahrenheit > 0)
                {
                    <MudText Typo="Typo.body1">@wsdotReport.TemperatureInFahrenheit °F</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body1">n/a</MudText>
                }
            </MudItem>

            <MudItem xs="6" sm="6" md="3">
                <MudText Typo="Typo.h6">Elevation</MudText>
                @if (wsdotReport.ElevationInFeet != null && wsdotReport.ElevationInFeet > 0)
                {
                    <MudText Typo="Typo.body1">@wsdotReport.ElevationInFeet ft</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body1">n/a</MudText>
                }
            </MudItem>
        </MudGrid>
    </MudContainer>

}
else
{
    <MudContainer Class="mb-8">
        <MudGrid>
            <MudItem xs="12">
                <MudAlert Severity="Severity.Warning" Elevation="@elevation">
                    <MudText Typo="Typo.body1">
                        @wsdotApiAlertText
                    </MudText>
                </MudAlert>
            </MudItem>
        </MudGrid>
    </MudContainer>

}

@code {

    [Parameter]
    public string Value { get; set; }

    private int elevation = 1;

    private string wsdotApiAlertText = "Looks like there was an issue with the WDOT API. " + 
        "Please try reloading the page ." +
        "If still not working please reference the WSDOT site for the current report using link above.";

    private WSDOTReport? wsdotReport;

    private string id = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            wsdotReport = await _WSDOTService.GetReportAsync(Value);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message + ex.StackTrace);
            _logger.LogError(ex.Message + ex.StackTrace);
        }
    }

}